/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal ARRAY;
terminal ASSIGN;
terminal COMMA;
terminal EXTENDS;
terminal DOT;
terminal NIL;
terminal RETURN;
terminal IF;
terminal WHILE;
terminal NEW;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LT;
terminal GT;
terminal EQ;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROGRAM Program;
non terminal AST_LIST<AST_DEC> decList;
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_ARRAYTYPEDEF arrayTypedef;
non terminal AST_VARDEC varDec;
non terminal AST_FUNCDEC funcDec;
non terminal AST_ARGUMENT argument;
non terminal AST_LIST<AST_ARGUEMENT> arguementList;
non terminal AST_CLASSDEC classDec;
non terminal AST_LIST<AST_CFIELD> cFieldList;
/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/
Program     ::= decList:declist {:RESULT = new AST_PROGRAM(declist);:};

decList     ::= dec:d decList:declist        {:RESULT = new AST_LIST<AST_DEC>(d, declist);:}
                | dec:d                      {:RESULT = new AST_LIST<AST_DEC>(d, null); :}
                ;


dec         ::= varDec:vardec                    {:RESULT = new AST_DEC(vardec, null, null, null);:}
                | funcDec:funcdec                {: RESULT = new AST_DEC(null, funcdec, null, null);:}
                | classDec:classdec              {: RESULT = new AST_DEC(null, null, classdec, null);:}
                | arrayTypedef:arraytypedef      {: RESULT = new AST_DEC(null, null, null, arraytypedef);:}
                ;

type        ::= TYPE_INT                     {:RESULT = new AST_TYPE('int', null);:}
                | TYPE_STRING                {:RESULT = new AST_TYPE('string', null);:}
                | TYPE_VOID                  {:RESULT = new AST_TYPE('void', null);:}
                | ID:id                 {:RESULT = new AST_TYPE('id', id);:}
                ;

arrayTypedef ::= ARRAY ID:id ASSIGN type:type LBRACK RBRACK SEMICOLON {:RESULT = new AST_ARRAYTYPEDEF(id, type);:};

varDec       ::= type:type ID:id  SEMICOLON                      {:RESULT = new AST_VARDEC(type, id, null, null);:}
                | type:type ID:id ASSIGN exp:exp SEMICOLON       {:RESULT = new AST_VARDEC(type, id, exp, null);:}
                | type:type ID:id ASSIGN newExp:newExp SEMICOLON {:RESULT = new AST_VARDEC(type, id, null, newExp);:}
                ;

funcDec     ::= type:type ID:id LPAREN RPAREN LBRACE stmtList:l RBRACE                         {:RESULT = new AST_FUNCDEC(type, id, null, l);:}
                | type:type ID:id LPAREN argumentsList:argList RPAREN LBRACE stmtList:stmtList RBRACE {:RESULT = new AST_FUNCDEC(type, id, argList, l);:}
                ;

argument      ::= type:type ID:id                      {:RESULT = new AST_ARGUMENT(type, id);:};

arguementList ::= argument:arg                              {:RESULT = new AST_LIST<AST_ARGUMENT>(arg, null);:}
                  | argument:arg COMMA argumentList:argList {:RESULT = new AST_LIST<AST_ARGUMENT>(arg, argList);:}
                  ;

classDec    ::= CLASS ID:id LBRACE cFieldList:list RBRACE                              {:RESULT = new AST_CLASSDEC(id, null, list);:}
                | CLASS ID:classId EXTENDS ID:extendsId LBRACE cFieldList RBRACE  {:RESULT = new AST_CLASSDEC(classId, extendsId, list);:}
                ;

cFieldList  ::= cField:cField                         {:RESULT = new AST_LIST<AST_CFIELD>(cField, null);:}
                | cField:cField cFieldList:cFieldList {:RESULT = new AST_LIST<AST_CFIELD>(cField, cFieldList);:}
                ;

/*
stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i);          :}
					| var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					;
*/