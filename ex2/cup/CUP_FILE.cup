/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal ARRAY;
terminal ASSIGN;
terminal COMMA;
terminal EXTENDS;
terminal DOT;
terminal NIL;
terminal RETURN
terminal IF;
terminal WHILE;
terminal NEW;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LT;
terminal GT;
terminal EQ;
terminal LPAREN;//TODO: check that all terminals below are indeed needed
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;//TODO: check this

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROGRAM Program;
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_LIST<AST_STMT> stmtList;
non terminal AST_LIST<AST_EXP> commaExpList;
non terminal AST_NEW_EXP;
non terminal AST_CFIELD;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/************************/
/* START WITH: stmtList */
/************************/
start with stmtList;

/********************/
/* DERIVATION RULES */
/********************/

Program     ::= dec:d Program:p              {:RESULT = new AST_PROGRAM_DEC_LIST(d, p);   :}
                | dec:d                      {:RESULT = new AST_PROGRAM_DEC_LIST(d, null); :}
                ;

stmt        ::=     varDec:v                                                    {: RESULT = new AST_STMT_VAR_DEC(v); :}
                    | var:v ASSIGN exp:e SEMICOLON                              {: RESULT = new AST_STMT_ASSIGN<AST_EXP>(v, e); :}
                    | var:v ASSIGN newExp:e SEMICOLON                           {: RESULT = new AST_STMT_ASSIGN<AST_NEW_EXP>(v, e); :}
                    | RETURN SEMICOLON                                          {: RESULT = new AST_STMT_RET(null); :}
                    | RETURN exp:e SEMICOLON                                    {: RESULT = new AST_STMT_RET(e); :}
                    | IF LPAREN exp:e RPAREN LBRACE stmtList:l RBRACE           {: RESULT = new AST_STMT_IF(e, l); :}
                    | WHILE LPAREN exp:e RPAREN LBRACE stmtList:l RBRACE        {: RESULT = new AST_STMT_WHILE(e, l); :}
                    | ID:id LPAREN RPAREN SEMICOLON                             {: RESULT = new AST_STMT_ID_VAR_EXP(null, id, null); :}
                    | ID:id LPAREN commaExpList:l RPAREN SEMICOLON              {: RESULT = new AST_STMT_ID_VAR_EXP(null, id, l); :}
                    | var:v DOT ID:id LPAREN RPAREN SEMICOLON                   {: RESULT = new AST_STMT_ID_VAR_EXP(v, id, null); :}
                    | var:v DOT ID:id LPAREN commaExpList:l RPAREN SEMICOLON    {: RESULT = new AST_STMT_ID_VAR_EXP(v, id, l); :}
                    ;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_LIST<AST_STMT>(s, l);    :}
					| stmt:s				{: RESULT = new AST_LIST<AST_STMT>(s, null); :}
					;

commaExpList ::=     exp:e COMMA commaExpList:l   {: RESULT = new AST_LIST<AST_EXP>(e, l); :}
                    | exp:e                       {: RESULT = new AST_LIST<AST_EXP>(e, null); :}
                    ;

newExp      ::=     NEW type:t                          {: RESULT = new AST_NEW_EXP_NEW_TYPE_EXP(t, null); :}
                    | NEW type:t LBRACK exp:e RBRACK     {: RESULT = new AST_NEW_EXP_NEW_TYPE_EXP(t, e); :}
                    ;

cField      ::=     varDec:v    {: RESULT = new AST_CFIELD_DEC<AST_VAR_DEC>(v); :}
                    | funcDec:f {: RESULT = new AST_CFIELD_DEC<AST_FUNC_DEC>(f); :}
                    ;

exp         ::= var:v                                               {:RESULT = new ASP_EXP_VAR(v); :}
                | LPAREN exp:e RPAREN                               {:RESULT = new ASP_EXP_EXP(e); :}

                | exp:e1 PLUS exp:e2                                {:RESULT = new AST_EXP_BINOP(e1, e2, 0); :}
                | exp:e1 MINUS exp:e2                               {:RESULT = new AST_EXP_BINOP(e1, e2, 1); :}
                | exp:e1 TIMES exp:e2                               {:RESULT = new AST_EXP_BINOP(e1, e2, 2); :}
                | exp:e1 DIVIDE exp:e2                              {:RESULT = new AST_EXP_BINOP(e1, e2, 3); :}
                | exp:e1 LT exp:e2                                  {:RESULT = new AST_EXP_BINOP(e1, e2, 4); :}
                | exp:e1 GT exp:e2                                  {:RESULT = new AST_EXP_BINOP(e1, e2, 5); :}
                | exp:e1 EQ exp:e2                                  {:RESULT = new AST_EXP_BINOP(e1, e2, 6); :}

                | ID:id LPAREN RPAREN                               {:RESULT = new AST_EXP_ID(id, null, null); :}
                | var:v DOT ID:id LPAREN RPAREN                     {:RESULT = new AST_EXP_ID(id, v, null); :}
                | ID:id LPAREN commaExpList:l RPAREN                {:RESULT = new AST_EXP_ID(id, null, l); :}
                | var:v DOT ID:id LPAREN commaExpList:l RPAREN      {:RESULT = new AST_EXP_ID(id, v, l); :}

                | MINUS INT:i                                       {:RESULT = new AST_EXP_OPT(i, null, 0); :}
                | INT:i                                             {:RESULT = new AST_EXP_OPT(i, null, 0); :}
                | STRING:s                                          {:RESULT = new AST_EXP_OPT(null, s, 1); :}
                | NIL
                ;

var          ::= ID:id                                              {: RESULT = new AST_VAR_ID(id); :}
                 | var:v DOT ID:id                                  {: RESULT = new AST_VAR_VAR_ID(v, id); :}
                 | var:v LBRACK exp:e RBRACK                        {: RESULT = new AST_VAR_EXP(v, e); :}
                 ;

/*


var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i);          :}
					| var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					;
*/